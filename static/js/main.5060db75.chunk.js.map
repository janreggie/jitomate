{"version":3,"sources":["components/Header.tsx","components/Footer.tsx","components/Knob.tsx","components/LengthControls.tsx","components/Timer/audioElement.ts","components/Timer/RemainingTimeDisplay.tsx","components/Timer/StartResetButtons.tsx","components/Timer/TimerLabel.tsx","components/Timer/index.tsx","components/Main.tsx","config.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","id","className","Footer","href","Knob","params","name","label","type","onClick","value","stepSize","setValue","disabled","maximum","LengthControls","sessionLength","setSessionLength","breakLength","setBreakLength","audioContext","window","AudioContext","webkitAudioContext","audioElement","document","querySelector","createMediaElementSource","connect","destination","RemainingTimeDisplay","seconds","remainingTime","pad","n","toString","padStart","Math","floor","StartResetButtons","isRunning","atToggleStartStop","atReset","TimerLabel","hasStarted","isOnBreak","Timer","useState","setRemainingTime","setHasStarted","setIsOnBreak","setIsRunning","useEffect","intervalID","setTimeout","clearTimeout","play","resetLengths","pause","currentTime","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5060db75.chunk.js","sourcesContent":["import React from 'react'\n\nfunction Header () {\n  return (\n    <header id='header'>\n      <nav className='navbar navbar-expand-lg navbar-light bg-light'>\n        <div className='container-fluid'>\n          <a></a>{/* Empty to make sure navbar-brand is aligned to the right */}\n          <a className='navbar-brand d-flex'>jitomate üçÖ</a>\n        </div>\n      </nav>\n    </header>\n  )\n}\n\nexport default Header\n","import React from 'react'\n\nfunction Footer () {\n  return (\n    <footer className='footer mt-auto py-3 bg-light' id='footer'>\n      <div className='container text-muted'>\n        Copyright ¬© 2021, janreggie. In fulfillment of the <a href='https://www.freecodecamp.org/learn/front-end-libraries/'>Front End Libraries</a> certification in freecodecamp.\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer\n","import React from 'react'\n\nexport type knobParameters = {\n  name: string\n  label: string\n  value: number\n  setValue: ((n: number) => void)\n  stepSize: number\n  maximum: number\n}\n\nfunction Knob (params: knobParameters) {\n  const increment = () => {\n    if (params.value + params.stepSize > params.maximum) {\n      return\n    }\n    params.setValue(params.value + params.stepSize)\n  }\n  const decrement = () => {\n    if (params.value <= params.stepSize) {\n      return\n    }\n    params.setValue(params.value - params.stepSize)\n  }\n\n  return (\n    <div className='p-2 bg-light border knob'>\n      <div id={params.name + '-label'}>{params.label}</div>\n      <div className='btn-group' id={params.name + '-knob'}>\n        <button className='btn btn-secondary' id={params.name + '-decrement'} type='button' onClick={decrement}>-</button>\n        <button className='btn' id={params.name + '-length'} disabled={true}>{params.value}</button>\n        <button className='btn btn-secondary' id={params.name + '-increment'} type='button' onClick={increment}>+</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Knob\n","import React from 'react'\nimport Knob from './Knob'\n\ntype lengthControlsParameters = {\n  sessionLength: number\n  setSessionLength: ((n : number) => void)\n  breakLength: number\n  setBreakLength: ((n : number) => void)\n}\n\nfunction LengthControls (params : lengthControlsParameters) {\n  return (\n    <div className='row' id='length-controls'>\n      <div className='col'>\n        <Knob\n          name='session'\n          label='Session Length'\n          value={params.sessionLength}\n          setValue={params.setSessionLength}\n          stepSize={1}\n          maximum={60} />\n      </div>\n      <div className='col'>\n        <Knob\n          name='break'\n          label='Break Length'\n          value={params.breakLength}\n          setValue={params.setBreakLength}\n          stepSize={1}\n          maximum={60} />\n      </div>\n    </div>\n  )\n}\n\nexport default LengthControls\n","// For audio (see https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Using_Web_Audio_API).\n// @ts-ignore webkitAudioContext may exist in other browsers\nconst AudioContext = window.AudioContext || window.webkitAudioContext\nconst audioContext = new AudioContext()\nconst audioElement = document.querySelector('audio')! // Exclamation pt b/c YES, IT EXISTS! Check /index.html\nconst track = audioContext.createMediaElementSource(audioElement)\ntrack.connect(audioContext.destination)\n\nexport default audioElement\n","import React from 'react'\n\nfunction RemainingTimeDisplay ({ remainingTime } : { remainingTime : number}) {\n  const pad = (n : number) => n.toString().padStart(2, '0')\n  const formatTime = (seconds : number) : string => pad(Math.floor(seconds / 60)) + ':' + pad(seconds % 60)\n\n  return (\n    <div id='time-left'>{formatTime(remainingTime)}</div>\n  )\n}\n\nexport default RemainingTimeDisplay\n","import React from 'react'\n\nexport type startResetButtonsParameters = {\n  isRunning : boolean\n  atToggleStartStop : (() => void)\n  atReset : (() => void)\n}\n\nfunction StartResetButtons (params : startResetButtonsParameters) {\n  return (\n      <div className='row' id='start-reset-buttons'>\n        <button className={'btn ' + (params.isRunning ? 'btn-outline-primary' : 'btn-primary') + ' m-2 col'}\n            type='button'\n            onClick={params.atToggleStartStop}\n            id='start_stop'>\n          {params.isRunning ? 'stop' : 'start'}\n        </button>\n        <button className='btn btn-danger m-2 col'\n            type='button'\n            onClick={params.atReset}\n            id='reset'>\n          reset\n        </button>\n      </div>\n  )\n}\n\nexport default StartResetButtons\n","import React from 'react'\n\nexport type timerLabelParameters = {\n  hasStarted : boolean\n  isRunning : boolean\n  isOnBreak : boolean\n}\n\nfunction TimerLabel (params : timerLabelParameters) {\n  const labelText = () => {\n    if (!params.hasStarted) {\n      return 'press start to start timer'\n    }\n    if (!params.isRunning) {\n      return 'press start to continue timer'\n    }\n    if (params.isOnBreak) {\n      return 'break started'\n    }\n    return 'session started'\n  }\n\n  return (\n    <div id='timer-label'>{ labelText() }</div>\n  )\n}\n\nexport default TimerLabel\n","import React, { useEffect, useState } from 'react'\nimport audioElement from './audioElement'\nimport RemainingTimeDisplay from './RemainingTimeDisplay'\nimport StartResetButtons from './StartResetButtons'\nimport TimerLabel from './TimerLabel'\n\nexport type timerParameters = {\n  sessionLength: number\n  breakLength: number\n  resetLengths: (() => void)\n}\n\nfunction Timer (params : timerParameters) {\n  const [remainingTime, setRemainingTime] = useState(params.sessionLength * 60) // remaining time that is visible\n  const [hasStarted, setHasStarted] = useState(false) // has start been pressed once?\n  const [isOnBreak, setIsOnBreak] = useState(false) // session or break mode?\n  const [isRunning, setIsRunning] = useState(false) // is it not paused?\n\n  /** atReset reverts the program to its \"initial\" state */\n  const atReset = () => {\n    setHasStarted(false)\n    setIsRunning(false)\n    setIsOnBreak(false)\n    params.resetLengths()\n    audioElement.pause()\n    audioElement.currentTime = 0\n    setRemainingTime(params.sessionLength * 60) // While this may seem unnecessary due to useEffect, Test 11 screws up if this isn't present...\n  }\n\n  /** atToggleStartStop runs when the start/stop button is pressed */\n  const atToggleStartStop = () => {\n    setHasStarted(true)\n    setIsRunning(!isRunning)\n  }\n\n  // To make sure that remainingTime is \"linked\" to sessionLength until start button has been pressed\n  useEffect(() => {\n    if (hasStarted) { return }\n    setRemainingTime(params.sessionLength * 60)\n  }, [hasStarted, params.sessionLength])\n\n  // To countdown remaining time\n  useEffect(() => {\n    if (!isRunning) { return }\n\n    const intervalID = setTimeout(() => {\n      setRemainingTime(remainingTime - 1)\n    }, 1000)\n    return () => { clearTimeout(intervalID) } // if isRunning gets toggled, make sure to cancel it\n  }, [remainingTime, isRunning])\n\n  // To trigger at 00:00\n  useEffect(() => {\n    if (remainingTime > 0) { return }\n\n    if (isOnBreak) {\n      setRemainingTime(params.sessionLength * 60)\n    } else {\n      setRemainingTime(params.breakLength * 60)\n    }\n    setIsOnBreak(!isOnBreak)\n    audioElement.play()\n  }, [remainingTime])\n\n  return (\n    <div className='p-2' id='timer'>\n      <TimerLabel hasStarted={hasStarted} isRunning={isRunning} isOnBreak={isOnBreak} />\n      <RemainingTimeDisplay remainingTime={remainingTime} />\n      <StartResetButtons isRunning={isRunning} atToggleStartStop={atToggleStartStop} atReset={atReset} />\n    </div>\n  )\n}\n\nexport default Timer\n","import React, { useState } from 'react'\nimport { DefaultBreakLength, DefaultSessionLength } from '../config'\nimport LengthControls from './LengthControls'\nimport Timer from './Timer'\n\nfunction Main () {\n  const [sessionLength, setSessionLength] = useState(DefaultSessionLength)\n  const [breakLength, setBreakLength] = useState(DefaultBreakLength)\n\n  return (\n    <main className='border text-center'>\n      <Timer\n        sessionLength={sessionLength}\n        breakLength={breakLength}\n        resetLengths={() => { setSessionLength(DefaultSessionLength); setBreakLength(DefaultBreakLength) }}\n        />\n      <LengthControls\n        sessionLength={sessionLength}\n        setSessionLength={setSessionLength}\n        breakLength={breakLength}\n        setBreakLength={setBreakLength} />\n    </main>\n  )\n}\n\nexport default Main\n","const DefaultSessionLength = 25\nconst DefaultBreakLength = 5\n\nexport {\n  DefaultSessionLength,\n  DefaultBreakLength\n}\n","import './App.scss'\nimport React from 'react'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Main from './components/Main'\n\nfunction App () {\n  return (\n    <div className='App'>\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import 'bootstrap/dist/css/bootstrap.css'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}